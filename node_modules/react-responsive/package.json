{
  "_args": [
    [
      {
        "raw": "react-responsive@^4.0.3",
        "scope": null,
        "escapedName": "react-responsive",
        "name": "react-responsive",
        "rawSpec": "^4.0.3",
        "spec": ">=4.0.3 <5.0.0",
        "type": "range"
      },
      "/Users/MorganPeck/Desktop/Project-PortfolioV"
    ]
  ],
  "_from": "react-responsive@>=4.0.3 <5.0.0",
  "_id": "react-responsive@4.0.3",
  "_inCache": true,
  "_location": "/react-responsive",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-responsive-4.0.3.tgz_1511321185223_0.1333350467029959"
  },
  "_npmUser": {
    "name": "contra",
    "email": "yo@contra.io"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-responsive@^4.0.3",
    "scope": null,
    "escapedName": "react-responsive",
    "name": "react-responsive",
    "rawSpec": "^4.0.3",
    "spec": ">=4.0.3 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-responsive/-/react-responsive-4.0.3.tgz",
  "_shasum": "1dccb135d21329a5b1e3bdfaa4e96b157647b265",
  "_shrinkwrap": null,
  "_spec": "react-responsive@^4.0.3",
  "_where": "/Users/MorganPeck/Desktop/Project-PortfolioV",
  "author": {
    "name": "Contra",
    "email": "yo@contra.io",
    "url": "http://contra.io"
  },
  "babel": {
    "presets": [
      "env",
      "react"
    ],
    "plugins": [
      "add-module-exports",
      "transform-class-properties",
      "transform-object-rest-spread"
    ]
  },
  "bugs": {
    "url": "https://github.com/contra/react-responsive/issues"
  },
  "dependencies": {
    "hyphenate-style-name": "^1.0.0",
    "matchmediaquery": "^0.2.1"
  },
  "description": "Media queries in react for responsive design",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.18.0",
    "babel-eslint": "^8.0.2",
    "babel-loader": "^7.1.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.16.0",
    "babel-register": "^6.18.0",
    "chai": "^4.1.2",
    "cross-env": "^5.1.1",
    "eslint": "^4.11.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-react": "^7.5.1",
    "github-changes": "^1.1.1",
    "jsdom": "^11.4.0",
    "mocha": "^4.0.0",
    "react": "^16.1.1",
    "react-dom": "^16.1.1",
    "should": "^13.1.3",
    "sinon": "^4.1.2",
    "webpack": "^3.8.1",
    "webpack-dev-server": "^2.9.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xHGZqFEyQhwuJdlAS98EOzVWqOA4W95PSQYhJ7bSw4TOz3kapc0IOU8ZdKyfZUeXJ6L8yo2YoiT34YeaKQxsEg==",
    "shasum": "1dccb135d21329a5b1e3bdfaa4e96b157647b265",
    "tarball": "https://registry.npmjs.org/react-responsive/-/react-responsive-4.0.3.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "eslintConfig": {
    "parser": "babel-eslint",
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended"
    ],
    "plugins": [
      "import",
      "react"
    ],
    "env": {
      "browser": true,
      "node": true,
      "mocha": true
    },
    "parserOptions": {
      "sourceType": "module",
      "ecmaVersion": 8,
      "ecmaFeatures": {
        "jsx": true
      }
    },
    "rules": {
      "semi": [
        2,
        "never"
      ],
      "react/prop-types": 0
    }
  },
  "files": [
    "dist"
  ],
  "gitHead": "191d9380d288b8de3dd6eeafd903db46b73d820a",
  "homepage": "http://github.com/contra/react-responsive",
  "keywords": [
    "css",
    "react-component",
    "viewport",
    "react",
    "mobile",
    "media queries",
    "respond",
    "media query",
    "matchMedia",
    "responsive",
    "component"
  ],
  "license": "MIT",
  "main": "./dist/react-responsive.js",
  "maintainers": [
    {
      "name": "contra",
      "email": "contra@wearefractal.com"
    },
    {
      "name": "fractal",
      "email": "contact@wearefractal.com"
    }
  ],
  "name": "react-responsive",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0.0",
    "prop-types": "^15.0.0"
  },
  "readme": "# react-responsive [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Support us][gittip-image]][gittip-url]\n\n\n## Information\n\n<table>\n<tr>\n<td>Package</td><td>react-responsive</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Media queries in react for responsive design</td>\n</tr>\n<tr>\n<td>Browser Version</td>\n<td>>= IE6*</td>\n</tr>\n</tr>\n<tr>\n<td colspan=\"2\"><a href=\"http://contra.io/react-responsive/\">Demo</a></td>\n</tr>\n</table>\n\nThe best supported, easiest to use react media query module.\n\n\nThis module is pretty straightforward: You specify a set of requirements, and the children will be rendered if they are met. Also handles changes so if you resize or flip or whatever it all just works.\n\n## Install\n\n```console\n$ npm install react-responsive --save\n```\n\n## Usage\n\nA MediaQuery element functions like any other React component, which means you can nest them and do all the normal jazz.\n\n### Using CSS Media Queries\n\n```jsx\nimport MediaQuery from 'react-responsive';\n\nconst Example = () => (\n  <div>\n    <div>Device Test!</div>\n    <MediaQuery query=\"(min-device-width: 1224px)\">\n      <div>You are a desktop or laptop</div>\n      <MediaQuery query=\"(min-device-width: 1824px)\">\n        <div>You also have a huge screen</div>\n      </MediaQuery>\n      <MediaQuery query=\"(max-width: 1224px)\">\n        <div>You are sized like a tablet or mobile phone though</div>\n      </MediaQuery>\n    </MediaQuery>\n    <MediaQuery query=\"(max-device-width: 1224px)\">\n      <div>You are a tablet or mobile phone</div>\n    </MediaQuery>\n    <MediaQuery query=\"(orientation: portrait)\">\n      <div>You are portrait</div>\n    </MediaQuery>\n    <MediaQuery query=\"(orientation: landscape)\">\n      <div>You are landscape</div>\n    </MediaQuery>\n    <MediaQuery query=\"(min-resolution: 2dppx)\">\n      <div>You are retina</div>\n    </MediaQuery>\n  </div>\n);\n```\n\n### Using Properties\n\nTo make things more idiomatic to react, you can use camelcased shorthands to construct media queries.\n\n\nFor a list of all possible shorthands and value types see https://github.com/wearefractal/react-responsive/blob/master/src/mediaQuery.js#L9\n\n\nAny numbers given as a shorthand will be expanded to px (`1234` will become `'1234px'`)\n\n\n```jsx\nimport MediaQuery from 'react-responsive';\n\nconst Example = () => (\n  <div>\n    <div>Device Test!</div>\n    <MediaQuery minDeviceWidth={1224}>\n      <div>You are a desktop or laptop</div>\n      <MediaQuery minDeviceWidth={1824}>\n        <div>You also have a huge screen</div>\n      </MediaQuery>\n      <MediaQuery maxWidth={1224}>\n        <div>You are sized like a tablet or mobile phone though</div>\n      </MediaQuery>\n    </MediaQuery>\n    <MediaQuery maxDeviceWidth={1224}>\n      <div>You are a tablet or mobile phone</div>\n    </MediaQuery>\n    <MediaQuery orientation=\"portrait\">\n      <div>You are portrait</div>\n    </MediaQuery>\n    <MediaQuery orientation=\"landscape\">\n      <div>You are landscape</div>\n    </MediaQuery>\n    <MediaQuery minResolution=\"2dppx\">\n      <div>You are retina</div>\n    </MediaQuery>\n  </div>\n);\n```\n\n### Rendering with a child function\n\nYou may also specify a function for the child of the MediaQuery component. When the component renders, it is passed whether or not the given media query matches. This function must return a single element or `null`.\n\n```jsx\n<MediaQuery minDeviceWidth={700}>\n  {(matches) => {\n    if (matches) {\n      return <div>Media query matches!</div>;\n    } else {\n      return <div>Media query does not match!</div>;\n    }\n  }}\n</MediaQuery>\n```\n\n### Component Property\n\nYou may specify an optional `component` property on the `MediaQuery` that indicates what component to wrap children with. Any additional props defined on the `MediaQuery` will be passed through to this \"wrapper\" component. If the `component` property is not defined and the `MediaQuery` has more than 1 child, a `div` will be used as the \"wrapper\" component by default. However, if the `component` prop is not defined and there is only 1 child, that child will be rendered alone without a component wrapping it.\n\n**Specifying Wrapper Component**\n\n```jsx\n<MediaQuery minDeviceWidth={700} component=\"ul\">\n  <li>Item 1</li>\n  <li>Item 2</li>\n</MediaQuery>\n\n// renders the following when the media query condition is met\n\n<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>\n```\n\n**Unwrapped Component**\n\n```jsx\n<MediaQuery minDeviceWidth={700}>\n  <div>Unwrapped component</div>\n</MediaQuery>\n\n// renders the following when the media query condition is met\n\n<div>Unwrapped component</div>\n```\n\n**Default div Wrapper Component**\n\n```jsx\n<MediaQuery minDeviceWidth={1200} className=\"some-class\">\n  <div>Wrapped</div>\n  <div>Content</div>\n</MediaQuery>\n\n// renders the following when the media query condition is met\n\n<div className=\"some-class\">\n  <div>Wrapped</div>\n  <div>Content</div>\n</div>\n```\n\n### Server rendering\n\nServer rendering can be done by passing static values through the `values` property. \n\nThe values property can contain `orientation`, `scan`, `aspectRatio`, `deviceAspectRatio`,\n`height`, `deviceHeight`, `width`, `deviceWidth`, `color`, `colorIndex`, `monochrome`,\n `resolution` and `type` to be matched against the media query.\n\n`type` can be one of: `all`, `grid`, `aural`, `braille`, `handheld`, `print`, `projection`,\n`screen`, `tty`, `tv` or `embossed`.\n\nIf you are using [redux](http://redux.js.org/) you can automatically pass `width` / `deviceWidth` values to your components with [react-responsive-redux](https://github.com/modosc/react-responsive-redux). \n\n\n```jsx\nimport MediaQuery from 'react-responsive';\n\nconst Example = () => (\n  <div>\n    <div>Device Test!</div>\n    <MediaQuery minDeviceWidth={1224} values={{ deviceWidth: 1600 }}>\n      <div>You are a desktop or laptop</div>\n      <MediaQuery minDeviceWidth={1824}>\n        <div>You also have a huge screen</div>\n      </MediaQuery>\n      <MediaQuery maxWidth={1224}>\n        <div>You are sized like a tablet or mobile phone though</div>\n      </MediaQuery>\n    </MediaQuery>\n    <MediaQuery maxDeviceWidth={1224}>\n      <div>You are a tablet or mobile phone</div>\n    </MediaQuery>\n    <MediaQuery orientation=\"portrait\">\n      <div>You are portrait</div>\n    </MediaQuery>\n    <MediaQuery orientation=\"landscape\">\n      <div>You are landscape</div>\n    </MediaQuery>\n    <MediaQuery minResolution=\"2dppx\">\n      <div>You are retina</div>\n    </MediaQuery>\n  </div>\n);\n```\n\n### Common use cases\n\n```javascript\nimport Responsive from 'react-responsive';\n\nconst Desktop = props => <Responsive {...props} minWidth={992} />;\nconst Tablet = props => <Responsive {...props} minWidth={768} maxWidth={991} />;\nconst Mobile = props => <Responsive {...props} maxWidth={767} />;\nconst Default = props => <Responsive {...props} minWidth={768} />;\n\nconst Example = () => (\n  <div>\n    <Desktop>Desktop or laptop</Desktop>\n    <Tablet>Tablet</Tablet>\n    <Mobile>Mobile</Mobile>\n    <Default>Not mobile (desktop or laptop or tablet)</Default>\n  </div>\n);\n\nexport default Example;\n```\n\n## Browser Support\n\n### Out of the box\n\n<table>\n<tr>\n<td>Chrome</td>\n<td>9</td>\n</tr>\n<tr>\n<td>Firefox (Gecko)</td>\n<td>6</td>\n</tr>\n<tr>\n<td>MS Edge</td>\n<td>All</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>10</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>12.1</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>5.1</td>\n</tr>\n</table>\n\n### With Polyfills\n\nPretty much everything. Check out these polyfills:\n\n- [matchMedia.js by Paul Irish](https://github.com/paulirish/matchMedia.js/)\n- [media-match (faster, but larger and lacking some features)](https://github.com/weblinc/media-match)\n\n[gittip-url]: https://www.gittip.com/WeAreFractal/\n[gittip-image]: http://img.shields.io/gittip/WeAreFractal.svg\n\n[downloads-image]: http://img.shields.io/npm/dm/react-responsive.svg\n[npm-url]: https://npmjs.org/package/react-responsive\n[npm-image]: http://img.shields.io/npm/v/react-responsive.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/contra/react-responsive.git"
  },
  "scripts": {
    "build": "npm run build:umd && npm run build:umd-min",
    "build:umd": "cross-env BUILD_MODE=umd webpack",
    "build:umd-min": "cross-env BUILD_MODE=umd-min webpack",
    "build:watch": "npm run build -- --watch",
    "changelog": "github-changes -o contra -r react-responsive -b master -f ./CHANGELOG.md --order-semver --use-commit-body",
    "clean": "rimraf dist",
    "lint": "eslint src test",
    "postversion": "npm run changelog",
    "preversion": "npm run clean && npm run build",
    "start": "webpack-dev-server --config webpack.config.samples.js  --content-base samples/sandbox/src --host 0.0.0.0 --hot --inline --port 3333",
    "test": "cross-env NODE_PATH=$NODE_PATH:$PWD/src mocha -R spec --compilers js:babel-register --require ./test/setup.js test/*_test.js"
  },
  "version": "4.0.3"
}
